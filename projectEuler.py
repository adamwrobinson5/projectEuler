# #Project Euler

import math

# # ***** PROBLEM 1 *****
# # If we list all the natural numbers below 10 that are multiples 
# # of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# # Find the sum of all the multiples of 3 or 5 below 1000.

# print ''
# print '*** PROBLEM 1 ***'
# print ''
# arr = []
# sum = 0
# for x in range(1,1000):
#     if (x % 3 == 0 or x % 5 == 0):
#         arr.append(x)
#         sum += x
# print 'ANSWER: ' + str(sum)




# # ***** PROBLEM 2 *****
# # Each new term in the Fibonacci sequence is generated by adding the
# # previous two terms. By starting with 1 and 2, the first 10 terms 
# # will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# # By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# print ''
# print '*** PROBLEM 2 ***'
# print ''
# fibArr = [1,2]
# evenArr = [2]
# sumEven = 2
# add = 0
# x = 2
# while add < 4000000:
#     add = fibArr[x-1] + fibArr[(x-2)]
#     if add % 2 == 0:
#         evenArr.append(add)
#         sumEven += add
#     fibArr.append(add)
#     x += 1
# fibArr.remove(add)
# print 'ANSWER: ' + str(sumEven)




# # ***** PROBLEM 3 *****
# # The prime factors of 13195 are 5, 7, 13 and 29.
# # What is the largest prime factor of the number 600851475143?

# print ''
# print '*** PROBLEM 3 ***'
# print ''
# primeArray = []
# x = 600851475143
# for i in range(3,int(math.sqrt(x))):
#     while x % i == 0:
#         primeArray.append(i)
#         x = x/i
# print 'ANSWER: ' + str(primeArray[-1])




# # ***** PROBLEM 4 *****
# # A palindromic number reads the same both ways. The largest
# # palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
# # Find the largest palindrome made from the product of two 3-digit numbers.

# print ''
# print '*** PROBLEM 4 ***'
# print ''
# a = 999
# b = 999
# palArray = []
# while b >= 100:
#     a = 999
#     while a >= 100:
#         front = []
#         back = []
#         revBack = []
#         mult = a * b
#         num = str(mult)
#         if len(num) == 6:
#             for i in range(0, 3):
#                 front.append(int(num[i]))
#             for j in range(3, 6):
#                 back.append(int(num[j]))
#             revBack.append(back[2])
#             revBack.append(back[1])
#             revBack.append(back[0])
#             if cmp(front, revBack) == 0:
#                 palArray.append(mult)
#         a -= 1
#     b -= 1
# sort = sorted(palArray)
# largestPalindrome = sort[-1]
# print 'ANSWER: ' + str(largestPalindrome)




# # ***** PROBLEM 5 *****
# # 2520 is the smallest number that can be divided by each of the numbers 
# # from 1 to 10 without any remainder. What is the smallest positive number 
# # that is evenly divisible by all of the numbers from 1 to 20?

# print ''
# print '*** PROBLEM 5 ***'
# print ''
# num = 1
# primeArray = []
# for x in range(2,21):
#     primeCheck = 0
#     for y in range(2, x+1):
#         if x % y != 0:
#             primeCheck += 1
#         elif x != 2:
#             break
#         if primeCheck == x-2 or x == 2:
#             pwr = 1
#             exp = 0
#             while exp < 20:
#                 exp = x**pwr
#                 primeArray.append(x)
#                 pwr += 1
#             primeArray.remove(x)
#             break
# for i in range(0, len(primeArray)):
#     num *= primeArray[i]
# print 'ANSWER: ' + str(num)




# # ***** PROBLEM 6 *****
# # The sum of the squares of the first ten natural numbers is,
# # 1**2 + 2**2 + ... + 10**2 = 385
# # The square of the sum of the first ten natural numbers is,
# # (1 + 2 + ... + 10)**2 = 552 = 3025
# # Hence the difference between the sum of the squares of the 
# # first ten natural numbers and the square of the sum is 
# # 3025 - 385 = 2640
# # Find the difference between the sum of the squares of the 
# # first one hundred natural numbers and the square of the sum.

# print ''
# print '*** PROBLEM 6 ***'
# print ''
# natSum = 0
# natSqr = 0
# for x in range(1,101):
#     natSum += x**2
# for x in range(1,101):
#     natSqr += x
# natSqr **= 2
# diff = natSqr - natSum
# print 'ANSWER: ' + str(diff)




# # ***** PROBLEM 7 *****
# # By listing the first six prime numbers: 
# # 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# # What is the 10001st prime number?

# print ''
# print '*** PROBLEM 7 ***'
# print ''
# primeArray = []
# done = False
# def prime(x):
#     for j in range(2, int(math.floor(math.sqrt(x)+1))):
#         if x % j == 0:
#             return 0
#     return 1
# for i in range(2, 110000):
#     if prime(i) == 1:
#         primeArray.append(i)
#     if len(primeArray) == 10001:
#         done = True
#     if done == True:
#         break
# print primeArray[-1]




# # ***** PROBLEM 8 *****
# # The four adjacent digits in the 1000-digit number that 
# # have the greatest product are 9 * 9 * 8 * 9 = 5832
# # Find the thirteen adjacent digits in the 1000-digit number 
# # that have the greatest product. What is the value of this product?

# print ''
# print '*** PROBLEM 8 ***'
# print ''
# product = 0
# greatestProduct = 0
# number = str(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)
# for x in range(0,988):
#     product = int(number[x]) * int((number[x+1])) * int((number[x+2])) * int((number[x+3])) * int((number[x+4])) * int((number[x+5])) * int((number[x+6])) * int((number[x+7])) * int((number[x+8])) * int((number[x+9])) * int((number[x+10])) * int((number[x+11])) * int((number[x+12]))
#     if product > greatestProduct:
#         zero = number[x]
#         one = number[x + 1]
#         two = number[x + 2]
#         three = number[x + 3]
#         four = number[x + 4]
#         five = number[x + 5]
#         six = number[x + 6]
#         seven = number[x + 7]
#         eight = number[x + 8]
#         nine = number[x + 9]
#         ten = number[x + 10]
#         eleven = number[x + 11]
#         twelve = number[x + 12]
#         greatestProduct = product
# print 'zero: ' + str(zero)
# print 'one: ' + str(one)
# print 'two: ' + str(two)
# print 'three: ' + str(three)
# print 'four: ' + str(four)
# print 'five: ' + str(five)
# print 'six: ' + str(six)
# print 'seven: ' + str(seven)
# print 'eight: ' + str(eight)
# print 'nine: ' + str(nine)
# print 'ten: ' + str(ten)
# print 'eleven: ' + str(eleven)
# print 'twelve: ' + str(twelve)
# print greatestProduct




# # ***** PROBLEM 9 *****
# # A Pythagorean triplet is a set of three natural numbers, a < b < c, 
# # for which, a**2 + b**2 = c**2
# # For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.
# # There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# # Find the product a * b * c.

# print ''
# print '*** PROBLEM 9 ***'
# print ''
# def triplet():
#     done = False
#     for c in range(3,1000):
#         for b in range(2, c):
#             for a in range(1, b):
#                 sum = a + b + c
#                 if sum > 1000:
#                     break
#                 if sum == 1000:
#                     if a**2 + b**2 == c**2:
#                         triplet = a * b * c
#                         done = True
#                     if done == True:
#                         print 'end a: ' + str(a)
#                         print 'end b: ' + str(b)
#                         print 'end c: ' + str(c)
#                         print 'triplet: ' + str(triplet)
#                         return
# triplet()




# # ***** PROBLEM 10 *****
# # The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# # Find the sum of all the primes below two million.

# print ''
# print '*** PROBLEM 10 ***'
# print ''
# sum = 0
# primeArray = []
# def prime(x):
#     if x % 1000 == 0:
#         print 'i: ' + str(x)
#     for j in range(2, int(math.floor(math.sqrt(x)+1))):
#         if x % j == 0:
#             return 0
#     return 1
# for i in range(2, 2000000):
#     if prime(i) == 1:
#         sum += i
# print sum




# # ***** PROBLEM 11 *****
# # In the 20*20 grid below, four numbers along a diagonal line have been marked in brackets.

# # 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
# # 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
# # 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
# # 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
# # 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
# # 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
# # 32 98 81 28 64 23 67 10 {26} 38 40 67 59 54 70 66 18 38 64 70
# # 67 26 20 68 02 62 12 20 95 {63} 94 39 63 08 40 91 66 49 94 21
# # 24 55 58 05 66 73 99 26 97 17 {78} 78 96 83 14 88 34 89 63 72
# # 21 36 23 09 75 00 76 44 20 45 35 {14} 00 61 33 97 34 31 33 95
# # 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
# # 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
# # 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
# # 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
# # 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
# # 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
# # 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
# # 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
# # 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
# # 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
# # The product of these numbers is 26 * 63 * 78 * 14 = 1788696.

# # What is the greatest product of four adjacent numbers in the same direction 
# # (up, down, left, right, or diagonally) in the 20*20 grid?

# print ''
# print '*** PROBLEM 11 ***'
# print ''
# grid = '\
# 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n\
# 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n\
# 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n\
# 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n\
# 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n\
# 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n\
# 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n\
# 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n\
# 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n\
# 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n\
# 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n\
# 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n\
# 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n\
# 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n\
# 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n\
# 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n\
# 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n\
# 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n\
# 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n\
# 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'
# gridArray = []
# for line in grid.split('\n'):
#     gridArray.append(map(int, line.split(' ')))
# greatestProduct = 0
# def diagonalRight():
#     diagonalRightProduct = 0
#     for x in range(0, 17):
#         for y in range(0, 17):
#             a = gridArray[x][y]
#             b = gridArray[x+1][y+1]
#             c = gridArray[x+2][y+2]
#             d = gridArray[x+3][y+3]
#             if a * b * c * d > diagonalRightProduct:
#                 diagonalRightProduct = a * b * c * d  
#     return diagonalRightProduct    
# def diagonalLeft():
#     diagonalLeftProduct = 0
#     for x in range(0, 17):
#         for y in range(0, 17):
#             d = gridArray[x][y+3]
#             c = gridArray[x+1][y+2]
#             b = gridArray[x+2][y+1]
#             a = gridArray[x+3][y]
#             if a * b * c * d > diagonalLeftProduct:
#                 diagonalLeftProduct = a * b * c * d  
#     return diagonalLeftProduct              
# def vertical():
#     verticalProduct = 0
#     for x in range(0, 17):
#         for y in range(0, 17):
#             a = gridArray[x][y]
#             b = gridArray[x+1][y]
#             c = gridArray[x+2][y]
#             d = gridArray[x+3][y]
#             if a * b * c * d > verticalProduct:
#                 verticalProduct = a * b * c * d 
#     return verticalProduct
# def horizontal():
#     horizontalProduct = 0
#     for x in range(0, 17):
#         for y in range(0, 17):
#             a = gridArray[x][y]
#             b = gridArray[x][y+1]
#             c = gridArray[x][y+2]
#             d = gridArray[x][y+3]
#             if a * b * c * d > horizontalProduct:
#                 horizontalProduct = a * b * c * d 
#     return horizontalProduct
# diagonalRight = diagonalRight()
# diagonalLeft = diagonalLeft()
# vertical = vertical()
# horizontal = horizontal()
# greatestProduct = [diagonalLeft, diagonalRight, vertical, horizontal]
# greatestProduct = sorted(greatestProduct)
# print 'Greatest Product: ' + str(greatestProduct[3])




# # ***** PROBLEM 12 *****
# # The sequence of triangle numbers is generated by adding the natural 
# # numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# # The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# # Let us list the factors of the first seven triangle numbers:
# #  1: 1
# #  3: 1,3
# #  6: 1,2,3,6
# # 10: 1,2,5,10
# # 15: 1,3,5,15
# # 21: 1,3,7,21
# # 28: 1,2,4,7,14,28
# # We can see that 28 is the first triangle number to have over five divisors.
# # What is the value of the first triangle number to have over five hundred divisors?

# print ''
# print '*** PROBLEM 12 ***'
# print ''
# done = False
# def divisor(i):
#     count = 1
#     for j in range(1, int((math.ceil(math.sqrt(i))))):
#         if i % j == 0:
#             count += 2
#     return count
# x = 1
# k = 2
# while done == False:
#     x = x + k
#     if divisor(x) > 500:
#         print 'Triangle Number: ' + str(x)
#         done = True
#     k += 1
        
        